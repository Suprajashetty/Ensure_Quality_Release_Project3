name: Azure Pipelines
trigger: 
  - main
pool:
  name: myAgentPool
variables:
  python.version: '3.7.6'
stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      name: myAgentPool
    steps:
    #Needed for terraform VM deployment
   
    - task: TerraformInstaller@0
      inputs:
        version: '1.2.1'
      displayName: "Install Terraform 1.2.1"
    - task: InstallSSHKey@0
      displayName: Security Access
      inputs:
          knownHostsEntry: "|1|SOuWZt9FxNAYmIOrFS/fpCXM2tk=|8sDU8l1uKGnPzjBEKo/QcGpUEjc= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPUfmKjkfeZCggyjBlcdBd6T1DxPjUj2LT1VcC2EijfbO1eSq+sZv+nHnxhQv/zWP9CCTW+rvu8qUwCl3cUyo1Y="
          sshPublicKey: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1Xhay0WaKNNzYJ0reGo5fBxp5bwHIQkknfUSg1852WFCqE+ERbdaGFw3odG8WDflMk77pxIqrrocmF/hklTp6TxAJGqKjrDUe0DMcw3gF5e1aCVa2sjoxKtWAsK9ZWyFUB4Z1bKtt04ljUbFoFnY0sey8rnYph+ElmdHOSBA64n6mvl4FfFAQFgPzCKq4Y9Xs1c6Pn9QWS75snxob14bDnHXYP//Wj+x+A+/Op0gNksz2Em4dIjFIst3uyFB+AflCXSritOMJ3EJtUW7fFVKGuwbKRMm9BZgb3Z+7umUYxNNTpJ++f0rW6J6egyg7PJQ1Hibve9bbNxIrv7Cpr0ax odl_user@cc-39e98893-686bfb787-jj4mv"
          sshKeySecureFile: 'id_rsa'
    - task: TerraformTaskV2@2 
      displayName: 'Initialize Terraform'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: 'myserviceconnection12312'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'storage12312'
        backendAzureRmContainerName: 'mycontainer123'
        backendAzureRmKey: 'terraform.tfstate'
    - task: TerraformTaskV1@0
      displayName: 'Validate Terraform'
      inputs:
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test' 
        environmentServiceNameAzureRM: myserviceconnection12312
    - task: TerraformTaskV1@0
      displayName: 'Plan Terraform'
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        commandOptions: '-var "public_key_path=ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1Xhay0WaKNNzYJ0reGo5fBxp5bwHIQkknfUSg1852WFCqE+ERbdaGFw3odG8WDflMk77pxIqrrocmF/hklTp6TxAJGqKjrDUe0DMcw3gF5e1aCVa2sjoxKtWAsK9ZWyFUB4Z1bKtt04ljUbFoFnY0sey8rnYph+ElmdHOSBA64n6mvl4FfFAQFgPzCKq4Y9Xs1c6Pn9QWS75snxob14bDnHXYP//Wj+x+A+/Op0gNksz2Em4dIjFIst3uyFB+AflCXSritOMJ3EJtUW7fFVKGuwbKRMm9BZgb3Z+7umUYxNNTpJ++f0rW6J6egyg7PJQ1Hibve9bbNxIrv7Cpr0ax odl_user@cc-39e98893-686bfb787-jj4mv"'
        environmentServiceNameAzureRM: myserviceconnection12312

    - task: TerraformTaskV1@0
      displayName: 'Apply Terraform'
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        commandOptions: '-var "public_key_path=ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1Xhay0WaKNNzYJ0reGo5fBxp5bwHIQkknfUSg1852WFCqE+ERbdaGFw3odG8WDflMk77pxIqrrocmF/hklTp6TxAJGqKjrDUe0DMcw3gF5e1aCVa2sjoxKtWAsK9ZWyFUB4Z1bKtt04ljUbFoFnY0sey8rnYph+ElmdHOSBA64n6mvl4FfFAQFgPzCKq4Y9Xs1c6Pn9QWS75snxob14bDnHXYP//Wj+x+A+/Op0gNksz2Em4dIjFIst3uyFB+AflCXSritOMJ3EJtUW7fFVKGuwbKRMm9BZgb3Z+7umUYxNNTpJ++f0rW6J6egyg7PJQ1Hibve9bbNxIrv7Cpr0ax odl_user@cc-39e98893-686bfb787-jj4mv"'
        environmentServiceNameAzureRM: myserviceconnection12312
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload FakeRestAPI Package'
      artifact: drop-fakerestapi

    - publish: automatedtesting/selenium/login.py
      displayName: 'Upload UI Tests definition'
      artifact: drop-ui-tests
      
- stage: Deploy
  jobs:
  - deployment: DeployFakeRestAPI
    displayName: 'Deploy app to custom VM'
    pool:
      name: myAgentPool
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App'
              inputs:
                azureSubscription: myserviceconnection12312
                appType: 'webApp'
                appName: 'test-app-AppService'
                package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
                deploymentMethod: 'auto'
- stage: Tests
  jobs:

  - job: Integration
    displayName: 'Integration Tests'
    pool:
      name: myAgentPool
    steps:

            - task: Bash@3
              displayName: 'Install Postman & Newman'
              inputs:
                targetType: 'inline'
                script: |
                  #! /bin/bash
                  sudo snap install postman
                  sudo apt-get install npm
                  sudo npm install -g newman
                  sudo npm install newman-reporter-junitfull -g      
            
            - task: Bash@3
              displayName: 'Regression Tests'
              inputs:
                workingDirectory: 'postman'
                targetType: 'inline'
                script: |
                  #! /bin/bash
                  newman run Regression testing.json \
                    -e DataValidation_environment.json \
                    -r cli,junitfull \
                    --reporter-junitfull-export JUnitReportRegression.xml
            
            - task: Bash@3
              displayName: 'Data Validation Tests'
              inputs:
                workingDirectory: 'postman'
                targetType: 'inline'
                script: |
                  #! /bin/bash
                  newman run Data Validation.json \
                    -e DataValidation_environment.json \
                    -r cli,junitfull \
                    --reporter-junitfull-export JUnitReportValidation.xml
            
            - task: PublishTestResults@2
              inputs:
                testResultsFormat: 'JUnit'
                testResultsFiles: '**/JUnitReport*.xml'
                testRunTitle: 'Publish test results'
                searchFolder: 'automatedtesting/postman'
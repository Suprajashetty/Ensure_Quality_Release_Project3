name: Azure Pipelines
trigger: 
  - main
pool:
  name: myAgentPool
variables:
  python.version: '3.7.6'
stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      name: myAgentPool
    steps:
    #Needed for terraform VM deployment
   
    - task: TerraformInstaller@0
      inputs:
        version: '1.2.1'
      displayName: "Install Terraform 1.2.1"
    - task: InstallSSHKey@0
      displayName: Security Access
      inputs:
          knownHostsEntry: "|1|SOuWZt9FxNAYmIOrFS/fpCXM2tk=|8sDU8l1uKGnPzjBEKo/QcGpUEjc= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPUfmKjkfeZCggyjBlcdBd6T1DxPjUj2LT1VcC2EijfbO1eSq+sZv+nHnxhQv/zWP9CCTW+rvu8qUwCl3cUyo1Y="
          sshPublicKey: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1Xhay0WaKNNzYJ0reGo5fBxp5bwHIQkknfUSg1852WFCqE+ERbdaGFw3odG8WDflMk77pxIqrrocmF/hklTp6TxAJGqKjrDUe0DMcw3gF5e1aCVa2sjoxKtWAsK9ZWyFUB4Z1bKtt04ljUbFoFnY0sey8rnYph+ElmdHOSBA64n6mvl4FfFAQFgPzCKq4Y9Xs1c6Pn9QWS75snxob14bDnHXYP//Wj+x+A+/Op0gNksz2Em4dIjFIst3uyFB+AflCXSritOMJ3EJtUW7fFVKGuwbKRMm9BZgb3Z+7umUYxNNTpJ++f0rW6J6egyg7PJQ1Hibve9bbNxIrv7Cpr0ax odl_user@cc-39e98893-686bfb787-jj4mv"
          sshKeySecureFile: 'id_rsa'
    - task: TerraformTaskV2@2 
      displayName: 'Initialize Terraform'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: 'myserviceconnection12312'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'storage12312'
        backendAzureRmContainerName: 'mycontainer123'
        backendAzureRmKey: 'terraform.tfstate'
    - task: TerraformTaskV1@0
      displayName: 'Validate Terraform'
      inputs:
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test' 
        environmentServiceNameAzureRM: myserviceconnection12312
    - task: TerraformTaskV1@0
      displayName: 'Plan Terraform'
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        commandOptions: '-var "public_key_path=ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1Xhay0WaKNNzYJ0reGo5fBxp5bwHIQkknfUSg1852WFCqE+ERbdaGFw3odG8WDflMk77pxIqrrocmF/hklTp6TxAJGqKjrDUe0DMcw3gF5e1aCVa2sjoxKtWAsK9ZWyFUB4Z1bKtt04ljUbFoFnY0sey8rnYph+ElmdHOSBA64n6mvl4FfFAQFgPzCKq4Y9Xs1c6Pn9QWS75snxob14bDnHXYP//Wj+x+A+/Op0gNksz2Em4dIjFIst3uyFB+AflCXSritOMJ3EJtUW7fFVKGuwbKRMm9BZgb3Z+7umUYxNNTpJ++f0rW6J6egyg7PJQ1Hibve9bbNxIrv7Cpr0ax odl_user@cc-39e98893-686bfb787-jj4mv"'
        environmentServiceNameAzureRM: myserviceconnection12312

    - task: TerraformTaskV1@0
      displayName: 'Apply Terraform'
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        commandOptions: '-var "public_key_path=ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC1Xhay0WaKNNzYJ0reGo5fBxp5bwHIQkknfUSg1852WFCqE+ERbdaGFw3odG8WDflMk77pxIqrrocmF/hklTp6TxAJGqKjrDUe0DMcw3gF5e1aCVa2sjoxKtWAsK9ZWyFUB4Z1bKtt04ljUbFoFnY0sey8rnYph+ElmdHOSBA64n6mvl4FfFAQFgPzCKq4Y9Xs1c6Pn9QWS75snxob14bDnHXYP//Wj+x+A+/Op0gNksz2Em4dIjFIst3uyFB+AflCXSritOMJ3EJtUW7fFVKGuwbKRMm9BZgb3Z+7umUYxNNTpJ++f0rW6J6egyg7PJQ1Hibve9bbNxIrv7Cpr0ax odl_user@cc-39e98893-686bfb787-jj4mv"'
        environmentServiceNameAzureRM: myserviceconnection12312
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload FakeRestAPI Package'
      artifact: drop-fakerestapi

    - publish: automatedtesting/selenium/login.py
      displayName: 'Upload UI Tests definition'
      artifact: drop-ui-tests
      
- stage: Deploy
  jobs:
  - deployment: DeployFakeRestAPI
    displayName: 'Deploy app to custom VM'
    pool:
      name: myAgentPool
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App'
              inputs:
                azureSubscription: myserviceconnection12312
                appType: 'webApp'
                appName: 'test-app-AppService'
                package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
                deploymentMethod: 'auto'

- stage: Testing
  displayName: 'Integration testing'
  jobs:
  - job: runNewman
    displayName: 'Run Newman/Postman data validation tests'    
    pool:
      name: myAgentPool
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
              npm install -g newman
              npm install -g newman-reporter-junitfull
              newman run -e "$(System.DefaultWorkingDirectory)/automatedtesting/postman/DataValidation_environment.json" "$(System.DefaultWorkingDirectory)/automatedtesting/postman/Regressiontesting.json" -r cli,junitfull --reporter-junitfull-export result-data-validation-test.xml              
              newman run -e "$(System.DefaultWorkingDirectory)/automatedtesting/postman/DataValidation_environment.json" "$(System.DefaultWorkingDirectory)/automatedtesting/postman/DataValidation.json" -r cli,junitfull --reporter-junitfull-export result-data-regression-test.xml
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*.xml'
      
  - job: publishSelenium
    displayName: 'Publish Selenium'
    pool:
      name: 'myAgentPool'
    steps:
    - publish: $(System.DefaultWorkingDirectory)/automatedtesting/selenium/login.py
      artifact: seleniumFile
  - deployment: seleniumOnVMDeploy
    pool:
      name: 'myAgentPool'
    displayName: 'Install and run Selenium on VM'
    dependsOn: publishSelenium
    environment:
      name:  'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: seleniumFile
          - task: Bash@3
            displayName: 'Run Selenium functional tests'
            inputs:
              targetType: 'inline'
              script: |
                #!/bin/bash
                sudo mkdir -p /var/log/selenium/
                sudo touch /var/log/selenium/selenium.log
                sudo chmod 777 /var/log/selenium/selenium.log
                sudo apt-get update -y
                sudo apt-get install -y chromium-browser
                FILE=chromedriver_linux64.zip
                if [ -f "$FILE" ]; then
                    echo "$FILE exists."
                else
                    wget https://chromedriver.storage.googleapis.com/93.0.4577.63/chromedriver_linux64.zip
                fi
                # install chrome driver
                unzip chromedriver_linux64.zip
                sudo mv chromedriver /usr/bin/chromedriver
                sudo chown root:root /usr/bin/chromedriver
                sudo chmod +x /usr/bin/chromedriver
                chromium-browser -version
                chromedriver --version
                curl https://bootstrap.pypa.io/pip/3.5/get-pip.py -o get-pip.py
                python3 get-pip.py
                pip3 install selenium
                python3 $(Pipeline.Workspace)/seleniumFile/login.py 2>&1 | tee -a /var/log/selenium/selenium.log
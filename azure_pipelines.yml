name: Azure Pipelines
trigger: 
  - main
pool:
  name: myAgentPool
variables:
  python.version: '3.7.6'
stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      name: myAgentPool
    steps:
    #Needed for terraform VM deployment
   
    - task: TerraformInstaller@0
      inputs:
        version: '1.2.1'
      displayName: "Install Terraform 1.2.1"
    - task: InstallSSHKey@0
      displayName: Security Access
      inputs:
          knownHostsEntry: "|1|yzelZFc8v8dXyO+MSwtssH8DMd0=|I+B92Ys7EBwL0Yc+PUDITi2zcWY= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBG85tjBWuKKDZFJigjsIqYH2wU3Oz1hqmKTrY3vH3eSU8DHd6K0TS0ahzCkYZeFg99JRA0xtE5euD0wtjugyPa4="
          sshPublicKey: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5pnysevvB5nNSZooqqPwujSHG/ZYpwfy9zQEVeXjAr/2xwF027cnlD9GI3+szqxFFenQPelsax3wzGrfda/wC/9PCiq6JRvB7bS1TtFUZFp5XW6hVbMYpAnul+UTKuZQuzkxqsAOK6jhz24Boe6VVV2N4evyM8yCh0wp3kfVMh1V2+yQzW6fCONKU7kMDvx45qyBQGvs67LHoK4P77ShAPnXK4PNjttqsKo68BJF4CSOvvD4koiJUJO6DDqu7YRH/iEEIjpKhtELXmsMwb74+XUo1CrB/Cvu2r8m6e3+l8hiumInVeKrZey3vUzpF43oKktso3uabjBNbiNz9XEEB odl_user@cc-2b0aeae1-777bd6b9c9-jmcwd"
          sshKeySecureFile: 'id_rsa'
    - task: TerraformTaskV2@2 
      displayName: 'Initialize Terraform'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: 'myserviceconnection12312'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'storage12312'
        backendAzureRmContainerName: 'mycontainer123'
        backendAzureRmKey: 'terraform.tfstate'
    - task: TerraformTaskV1@0
      displayName: 'Validate Terraform'
      inputs:
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test' 
        environmentServiceNameAzureRM: myserviceconnection12312
    - task: TerraformTaskV1@0
      displayName: 'Plan Terraform'
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        commandOptions: '-var "public_key_path=ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5pnysevvB5nNSZooqqPwujSHG/ZYpwfy9zQEVeXjAr/2xwF027cnlD9GI3+szqxFFenQPelsax3wzGrfda/wC/9PCiq6JRvB7bS1TtFUZFp5XW6hVbMYpAnul+UTKuZQuzkxqsAOK6jhz24Boe6VVV2N4evyM8yCh0wp3kfVMh1V2+yQzW6fCONKU7kMDvx45qyBQGvs67LHoK4P77ShAPnXK4PNjttqsKo68BJF4CSOvvD4koiJUJO6DDqu7YRH/iEEIjpKhtELXmsMwb74+XUo1CrB/Cvu2r8m6e3+l8hiumInVeKrZey3vUzpF43oKktso3uabjBNbiNz9XEEB odl_user@cc-2b0aeae1-777bd6b9c9-jmcwd"'
        environmentServiceNameAzureRM: myserviceconnection12312

    - task: TerraformTaskV1@0
      displayName: 'Apply Terraform'
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        commandOptions: '-var "public_key_path=ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5pnysevvB5nNSZooqqPwujSHG/ZYpwfy9zQEVeXjAr/2xwF027cnlD9GI3+szqxFFenQPelsax3wzGrfda/wC/9PCiq6JRvB7bS1TtFUZFp5XW6hVbMYpAnul+UTKuZQuzkxqsAOK6jhz24Boe6VVV2N4evyM8yCh0wp3kfVMh1V2+yQzW6fCONKU7kMDvx45qyBQGvs67LHoK4P77ShAPnXK4PNjttqsKo68BJF4CSOvvD4koiJUJO6DDqu7YRH/iEEIjpKhtELXmsMwb74+XUo1CrB/Cvu2r8m6e3+l8hiumInVeKrZey3vUzpF43oKktso3uabjBNbiNz9XEEB odl_user@cc-2b0aeae1-777bd6b9c9-jmcwd"'
        environmentServiceNameAzureRM: myserviceconnection12312
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload FakeRestAPI Package'
      artifact: drop-fakerestapi

    - publish: automatedtesting/selenium/login.py
      displayName: 'Upload UI Tests definition'
      artifact: drop-ui-tests
      
- stage: Deploy
  jobs:
  - deployment: DeployFakeRestAPI
    displayName: 'Deploy app to custom VM'
    pool:
      name: myAgentPool
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App'
              inputs:
                azureSubscription: myserviceconnection12312
                appType: 'webApp'
                appName: 'test-app-AppService'
                package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
                deploymentMethod: 'auto'

- stage: Testing
  displayName: 'Integration testing'
  jobs:
  - job: runNewman
    displayName: 'Run Newman/Postman data validation tests'    
    pool:
      name: myAgentPool
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
              sudo apt install npm
              sudo npm install -g newman
              sudo npm install -g newman-reporter-junitfull
              newman run -e "$(System.DefaultWorkingDirectory)/automatedtesting/postman/DataValidation_environment.json" "$(System.DefaultWorkingDirectory)/automatedtesting/postman/Regressiontesting.json" -r cli,junitfull --reporter-junitfull-export result-data-validation-test.xml              
              newman run -e "$(System.DefaultWorkingDirectory)/automatedtesting/postman/DataValidation_environment.json" "$(System.DefaultWorkingDirectory)/automatedtesting/postman/DataValidation.json" -r cli,junitfull --reporter-junitfull-export result-data-regression-test.xml
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*.xml'
      
  - job: publishSelenium
    displayName: 'Publish Selenium'
    pool:
      name: 'myAgentPool'
    steps:
    - publish: $(System.DefaultWorkingDirectory)/automatedtesting/selenium/login.py
      artifact: seleniumFile
  - deployment: seleniumOnVMDeploy
    pool:
      name: 'myAgentPool'
    displayName: 'Install and run Selenium on VM'
    dependsOn: publishSelenium
    environment:
      name:  'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: seleniumFile
          - task: Bash@3
            displayName: 'Run Selenium functional tests'
            inputs:
              targetType: 'inline'
              script: |
                #!/bin/bash
                sudo mkdir -p /var/log/selenium/
                sudo touch /var/log/selenium/selenium.log
                sudo chmod 777 /var/log/selenium/selenium.log
                sudo apt-get update -y
                sudo apt-get install -y chromium-chromedriver chromium-browser
                curl https://bootstrap.pypa.io/pip/3.5/get-pip.py -o get-pip.py
                python3 get-pip.py
                pip3 install selenium
                python3 $(Pipeline.Workspace)/seleniumFile/login.py 2>&1 | tee -a /var/log/selenium/selenium.log

- stage: JMeterTests
  displayName: JMeter Tests
  jobs:
   - job: JMETERTests
     displayName: Test JMeter
     pool:
       name: 'myAgentPool'
     steps:
     - bash: |
         sudo apt-get install openjdk-11-jre-headless -y
         java -version
         wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
         tar xzvf jmeter.tgz
         apache-jmeter-5.4/bin/jmeter --version
         mkdir -p log/jmeter
       displayName: Install JMeter
     - bash: |
         apache-jmeter-5.4/bin/jmeter -n -t automatedtesting/jmeter/StressTest.jmx \
                                       -l log/jmeter/stress-test-result.csv \
                                       -e -f -o log/jmeter/stress-test-html-report \
                                       -j log/jmeter/jmeter-stress-test.log
       displayName: JMeter stress test
     - bash: |
         apache-jmeter-5.4/bin/jmeter -n -t automatedtesting/jmeter/EnduranceTest.jmx \
                                       -l log/jmeter/endurance-test-result.csv \
                                       -e -f -o log/jmeter/endurance-test-html-report \
                                       -j log/jmeter/jmeter-endurance-test.log
       displayName: JMeter endurance test
     - task: ArchiveFiles@2
       displayName: Archive JMeter stress test HTML report
       inputs:
         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
         includeRootFolder: false
         archiveType: 'zip'
         archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
         verbose: true
     - task: ArchiveFiles@2
       displayName: Archive JMeter endurance test HTML report
       inputs:
         rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
         includeRootFolder: false
         archiveType: 'zip'
         archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
         verbose: true
     - bash: |
         rm -rf log/jmeter/stress-test-html-report
         rm -rf log/jmeter/endurance-test-html-report
       displayName: Delete original JMeter test HTML reports
     - task: PublishPipelineArtifact@1
       displayName: Publish JMeter logs
       inputs:
         targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
         artifactName: 'drop-jmeter-logs'